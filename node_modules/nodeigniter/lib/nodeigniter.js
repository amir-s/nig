var fs = require('fs'),
	connect = require('connect'),
	utils = connect.utils,
	extend = require('xtend');
var nodeigniter = function() {
	
	var self = this;
	
	this.config = {}; // for configuration
	this.locals = {}; // for local vars, helpers
	this.logger = []; // for logging
	this.autoload = {}; // for autoloaded resources
	this.fn = {};
	this.controllers = {};
	this.custom_routes = [];
	this.models = [];
	this.input = {};
	this.session = {};
	this.subscribed = 0; //total number of connections
	this.server = null;
	//initialize nodeigniter
	this.listen = function(port) {
		//try {
			self.config('port', port);
			self.config('lib_dir', __dirname.slice(0,-3));
			self.config('sys_dir', self.config('lib_dir') + "system/");
			self.load_configs();
			self.load_controllers();
			self.load_models();
			self._autoload();
			
			this.server = connect.createServer(
				connect.favicon('public/favicon.ico'),
				connect.static('public'),
				connect.bodyParser(),
				connect.query(),
				connect.cookieParser('ni_cookie'),
				connect.session({secret: 'kM43QtvEhmhH2KK9sJac',cookie: {maxAge: 36000}}),
				self.router,
				self.not_found
			).listen(port);


			console.log('Initialization Successful\nListening on port ' + port);
		//} catch (err) {
		//	console.log('Initialization Failed %j', err);
		//}
	}
	
	//autoload resources
	this._autoload = function() {		
		try {
			//autoload from config/autoload.js
			var autoload = require(this.config('app_dir') + 'config/autoload.js');
			
			//helpers
			if (autoload['helpers'].length > 0) {
				self.load_helper(autoload['helpers']);
			}
			
			//libraries
			if (autoload['libraries'].length > 0) {
				self.load_library(autoload['libraries']);
			}
			
			//defined routes from config/routes.js
			var routes = self.config(':routes');
			if (routes['route'].length > 0) {
				for (var i in routes['route']) {
					var route = routes['route'][i];
					self._createRoute(route.src, route.dest, route.method);
				}
			}
			console.log('Autoloading Successful');
		} catch(err) {
			console.log('Autoloading Resources Failed - %j', err);
		}
	}
	
	//for config
	this.config = function(name, value) {
		if (typeof(name) != 'undefined' && typeof(value) != 'undefined') {
			// This is a setter
			this.config[name] = value;
			return true;
		}
		else if (typeof(name) != 'undefined') {
			// This is a getter
			return this.config[name];
		}
		else {
			return null;
		}
	}	
	
	//create routes
	this._createRoute = function (source, destination, method) {
		if (source!=undefined && destination!=undefined) {
			self.custom_routes.push({src: source, dest: destination || '/', method: method || false});
		}
	}
	
	//matching custom routes
	this._checkRoutes = function (path, method) {		
		var routes = self.custom_routes;
		if (routes.length == 0) {return path};
		for (var i = 0; i < routes.length; i++) {
			var route = routes[i];
			var methodMatch = !route.method;
			
			if (path==route.src) {
				if (Array.isArray(route.method)) {
					for (var i in route.method) {
						if (route.method[i].toUpperCase() === method) {
							methodMatch = true;
						};
					}
				} else {methodMatch = true;}
				if (methodMatch) return route.dest;
			}
		}
		return path;
	}

	this.input = new function () {

		this.headers = function () {
			return self.req.headers;
		}

		this.method = function () {
			return self.req.method;
		}

		this.url = function () {
			return self.req.url;
		}

		this.get = function (variable) {
			if (typeof self.req.query[variable] === 'undefined') return null;
			return self.req.query[variable];
		}

		this.post = function (variable) {
			if (typeof self.req.body[variable] === 'undefined') return null;
			return self.req.body[variable];	
		}

		this.cookies = function() {
			return self.req.cookies;
		}
		
	}
	
	//custom router
	this.router = function(req, res, next) {
		var start = Number(new Date());

		self.res = res;
		self.req = req;

		var parsedUrl = require('url').parse(req.url, true);
		var pathArr, args, controller, fn;
		
		//check if path is available in the added routes
		parsedUrl = self._checkRoutes(parsedUrl.pathname, req.method);
		parsedUrl = (parsedUrl.indexOf('/') !== 0) ? '/'+parsedUrl : parsedUrl;
		
		pathArr = parsedUrl.split('/');
		args = pathArr.slice(3);
		
		req.route = {};
		args.unshift(req, res, next);
		
		if (pathArr[1]) {
			controller = self.controllers[pathArr[1]];
			req.route.controller = pathArr[1];
		}else {
			controller = self.controllers.main;
			req.route.controller = 'main';
		}
		
		if (controller) {
			req.route.action = (pathArr[2]) ? pathArr[2] : 'index';
			if (req.route.action == 'remap') {
				next();
			}else {
				controller.remap(req, res, next, args);
			}
		} else {
			next();
		}
		
		var end = Number(new Date());
		console.log('Response: %j ms', end - start);
	}

	
	this.end = function () {
		self.res.end();
	}
	
	this.view = new function () {

		// configuring template engine
		this.ejs = require('ejs');
		this.ejs.open = '{{';
		this.ejs.close = '}}';

		this.load = function (filename, options, returnOutput){
			var options  = utils.merge(self.fn, options);
			var content = fs.readFileSync(self.config('app_dir')+'views/'+filename, 'utf-8');
			var output  = this.ejs.render(content, options);
			if (returnOutput === true) return output;
			else self.res.write(output, 'utf-8');
			return this;
		}

		this.render = function () {
			self.end();
			return this;
		}

	}
	
	this.model = function (name) {
		if (self.models[name]) return self.models[name];
		throw "Model " + name + " does not exists";
	}

	this.lib = function (name) {
		if (self.lib[name]) return self.lib[name];
		throw "Library " + name + " does not exists";	
	}

	this.load_helper = function (name) {
		if (typeof(name) === 'object') {
			for (var i in name) {
				self.load_helper(name[i]);
			}
		} else {
			var sys_fn = self.config('sys_dir') + 'helpers/' + name + '.js',
				app_fn = self.config('app_dir') + 'helpers/' + name + '.js';
			if (fs.existsSync(app_fn)) {
				self.fn = utils.merge(self.fn, require(app_fn));
			}else if (fs.existsSync(sys_fn)) {
				self.fn = utils.merge(self.fn, require(sys_fn));
			}else {
				throw 'Helper ' + name + ' not found';
			}
		}
		return self;
	}

	this.load_library = function (name) {
		if (typeof(name) === 'object') {
			for (var i in name) {
				self.load_library(name[i]);
			}
		} else {
			if (self.lib[name]) return;
			var sys_lib = self.config('sys_dir') + 'libraries/' + name + '.js',
				app_lib = self.config('app_dir') + 'libraries/' + name + '.js';

			var base_lib = require(self.config('sys_dir') + 'core/library');
			
			if (fs.existsSync(app_lib)) {
				self.lib[name] = require(app_lib);
			}else if (fs.existsSync(sys_lib)) {
				self.lib[name] = require(sys_lib);
			}else {
				throw 'Library ' + name + ' not found';
			}
			self.lib[name] = extend({}, base_lib, self.lib[name]);
			
		}
		return self;
	}

	this.load_controllers = function() {
		var app_ctrls = self.config('app_dir')+'controllers';
		var base_controller = require(self.config('sys_dir') + 'core/controller');
		
		// check for application controller
		if (fs.existsSync(self.config('app_dir')+'core/controller.js')) {
			base_controller = extend({}, base_controller, require(self.config('app_dir')+'core/controller.js'));
		}

		fs.readdir(app_ctrls, function(err, files){
			files.forEach(function(file){
				if (!/~$/.test(file)) {
					var name = file.split('.')[0];
					self.controllers[name] = extend({}, base_controller, require(app_ctrls + '/' + file));
				}
			});
		});
	}

	

	this.load_models = function() {
		var app_models = self.config('app_dir')+'models';
		var base_model = require(self.config('sys_dir') + 'core/model');
		self.db = base_model.db;
		if (fs.existsSync(self.config('app_dir')+'core/model.js')) {
			base_model = extend({}, base_model, require(self.config('app_dir')+'core/model.js'));
		}
		fs.readdir(app_models, function(err, files){
			files.forEach(function (file){
				if (!/~$/.test(file)) {
					var name = file.split('.')[0];
					self.models[name] = extend({}, base_model, require(app_models + '/' + file));
				}
			});
		});
	}

	this.load_configs = function() {
		var app_cnfs = self.config('app_dir')+'config';
		var files = fs.readdirSync(app_cnfs);
		files.forEach(function(file) {
			if (!/~$/.test(file)) {
				var name = file.split('.')[0];
				self.config(':' + name, require(app_cnfs + '/' + file));
			}
		});
	}

	this.not_found = function (req, res, next) {
		fs.readFile(self.config('app_dir')+'error/not_found.js', 'utf-8', function (err, data) {
			if (err) throw err;
			res.writeHead(404);
			res.end(data, 'utf-8');
		});
	}

};

exports = module.exports = new nodeigniter();

