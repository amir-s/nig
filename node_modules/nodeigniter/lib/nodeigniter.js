var fs = require('fs'),
	utils = require('connect').utils,
	extend = require('xtend');
var nodeigniter = function() {
	
	var self = this;
	this.output = ''; // for page rendering
	this.config = {}; // for configuration
	this.locals = {}; // for local vars, helpers
	this.logger = []; // for logging
	this.autoload = {}; // for autoloaded resources
	this.fn = {};
	this.controllers = {};
	this.custom_routes = [];
	this.input = {};
	this.session = {};
	this.subscribed = 0; //total number of connections
	
	//initialize nodeigniter
	this._initialize = function(callback) {
		//try {
			self.config('lib_dir', __dirname.slice(0,-3));
			self.config('sys_dir', self.config('lib_dir') + "system/");
			self.load_config();
			self.load_controller();
			self.load_model();
			self._autoload();
			callback();
			console.log('Initialization Successful');
		//} catch (err) {
		//	console.log('Initialization Failed %j', err);
		//}
	}
	
	//autoload resources
	this._autoload = function() {		
		try {
			//autoload from config/autoload.js
			var autoload = require(this.config('root') + 'config/autoload.js');
			
			//helpers
			if (autoload['helpers'].length > 0) {
				self.load.helper(autoload['helpers']);
			}
			
			//libraries
			if (autoload['libraries'].length > 0) {
				self.load.library(autoload['libraries']);
			}
			
			//defined routes from config/routes.js
			var routes = require(this.config('root') + 'config/routes.js');
			if (routes['route'].length > 0) {
				for (var i in routes['route']) {
					var route = routes['route'][i];
					self._createRoute(route.src, route.dest, route.method);
				}
			}
			console.log('Autoloading Successful');
		} catch(err) {
			console.log('Autoloading Resources Failed - %j', err);
		}
	}
	
	//for config
	this.config = function(name, value) {
		if (typeof(name) != 'undefined' && typeof(value) != 'undefined') {
			// This is a setter
			this.config[name] = value;
			return true;
		}
		else if (typeof(name) != 'undefined') {
			// This is a getter
			return this.config[name];
		}
		else {
			return null;
		}
	}	
	
	//create routes
	this._createRoute = function (source, destination, method) {
		if (source!=undefined && destination!=undefined) {
			self.custom_routes.push({src: source, dest: destination || '/', method: method || false});
		}
	}
	
	//matching custom routes
	this._checkRoutes = function (path, method) {		
		var routes = self.custom_routes;
		if (routes.length == 0) {return path};
		for (var i = 0; i < routes.length; i++) {
			var route = routes[i];
			var methodMatch = !route.method;
			
			if (path==route.src) {
				if (Array.isArray(route.method)) {
					for (var i in route.method) {
						if (route.method[i].toUpperCase() === method) {
							methodMatch = true;
						};
					}
				} else {methodMatch = true;}
				if (methodMatch) return route.dest;
			}
		}
		return path;
	}	
	
	this._input = function(req, res) {
		self.input['headers'] = req.headers;
		self.input['method'] = req.method;
		self.input['req_vars'] = (req.method=='GET') ? req.query : req.body;
		self.input['url'] = req.url;
		self.input['origUrl'] = req.originalUrl;
		self.input['cookies'] = req.cookies;
		self.subscribed = req.client.server.connections;
		self.session = req.session;
		self.res = res;
	}
	
	//custom router
	this.router = function(req, res, next) {
		var start = Number(new Date());
		
		self._input(req, res);		
		var parsedUrl = require('url').parse(req.url, true);
		var pathArr, args, controller, fn;
		
		//check if path is available in the added routes
		parsedUrl = self._checkRoutes(parsedUrl.pathname, req.method);
		parsedUrl = (parsedUrl.indexOf('/') !== 0) ? '/'+parsedUrl : parsedUrl;
		
		pathArr = parsedUrl.split('/');
		args = pathArr.slice(3);
		
		req.route = {};
		args.unshift(req, res, next);
		
		if (pathArr[1]) {
			controller = self.controllers[pathArr[1]];
			req.route.controller = pathArr[1];
		}else {
			controller = self.controllers.main;
			req.route.controller = 'main';
		}
		
		if (controller) {
			req.route.action = (pathArr[2]) ? pathArr[2] : 'index';
			if (req.route.action == 'remap') {
				next();
			}else {
				controller.remap(req, res, next, args);
			}
		} else {
			next();
		}
		
		var end = Number(new Date());
		console.log('Response: %j ms', end - start);
	}

	
	this.end = function () {
		self.res.end();
	}
	
	this.load = new function () {
		// configuring template engine
		this.ejs = require('ejs');
		this.ejs.open = '{{';
		this.ejs.close = '}}';
		this.view = function (filename, options, returnOutput){
			var options  = utils.merge(self.fn, options);
			var content = fs.readFileSync(self.config('root')+'views/'+filename, 'utf-8');
			var output  = this.ejs.render(content, options);
			if (returnOutput === true) return output;
			else self.res.write(output, 'utf-8');
			return this;
		}
		
		this.helper = function(name) {
			var _dir = self.config('sys_dir') + 'helpers/';
			if (typeof(name) === 'object') {
				for (var i in name) {
					self.load.helper(name[i]);
				}
			} else {
				self.fn = utils.merge(self.fn, require(_dir + name + '.js'));
			}
			return this;
		}
		
		this.model = function(name) {
			var _dir = self.config('root') + 'models/';
			if (typeof(name) === 'object') {
				for (var i in name) {
					self.load.model(name[i]);
				}
			} else {
				var address = ((typeof(name) === 'string') ? name : name.name) + '_model';
				var instance = (typeof(name) === 'object' && name.instance) ? name.instance : address; 
				self[instance] = require(_dir + address + '.js');
			}
			return this;
		}
		
		
		this.library = function(name) {
			var _appdir = self.config('root') + 'libraries/';
			var _sysdir = self.config('sys_dir') + 'libraries/';
			if (typeof(name) === 'object') {
				for (var i in name) {
					self[name[i]] = require(_dir + name[i] + '.js');
				}
			} else {
				self[name] = require(_dir + name + '.js');
			}
			return this;
		}

	}
	
	this.not_found = function(req, res, next) {
		fs.readFile(self.config('root')+'error/not_found.js', 'utf-8', function (err, data) {
			if (err) throw err;
			res.writeHead(404);
			res.end(data, 'utf-8');
		});
	}
	
	

	this.load_controller = function() {
		var _dir = self.config('root')+'controllers';
		var base_controller = require(self.config('sys_dir') + 'core/controller');
		
		// check for application controller
		if (fs.existsSync(self.config('root')+'core/controller.js')) {
			base_controller = extend(base_controller, require(self.config('root')+'core/controller.js'));
		}

		fs.readdir(_dir, function(err, files){
			files.forEach(function(file){
				if (!/~$/.test(file)) {
					var name = file.split('.')[0];
					self.controllers[name] = extend(base_controller, require(_dir + '/' + file));
				}
			});
		});
	}

	this.load_model = function() {
		var _dir = self.config('root')+'controllers';
		var base_model = require(self.config('sys_dir') + 'core/model');
		base_model.test();
		return;
		// check for application controller
		if (fs.existsSync(self.config('root')+'core/controller.js')) {
			base_controller = extend(base_controller, require(self.config('root')+'core/controller.js'));
		}

		fs.readdir(_dir, function(err, files){
			files.forEach(function(file){
				if (!/~$/.test(file)) {
					var name = file.split('.')[0];
					self.controllers[name] = extend(base_controller, require(_dir + '/' + file));
				}
			});
		});
	}

	this.load_config = function() {
		var _dir = self.config('root')+'config';
		fs.readdir(_dir, function(err, files){
			files.forEach(function(file){
				if (!/~$/.test(file)) {
					var name = file.split('.')[0];
					self.config(':' + name, require(_dir + '/' + file));
				}
			});
		});
	}
};

exports = module.exports = new nodeigniter();

